/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE OBSTACLE_DISTANCE PACKING
package com.MAVLink.common;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;

/**
 * Obstacle distances in front of the sensor, starting from the left in increment degrees to the right
 */
public class msg_obstacle_distance extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_OBSTACLE_DISTANCE = 330;
    public static final int MAVLINK_MSG_LENGTH = 167;
    private static final long serialVersionUID = MAVLINK_MSG_ID_OBSTACLE_DISTANCE;


    /**
     * Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
     */
    public long time_usec;

    /**
     * Distance of obstacles around the vehicle with index 0 corresponding to north + angle_offset, unless otherwise specified in the frame. A value of 0 is valid and means that the obstacle is practically touching the sensor. A value of max_distance +1 means no obstacle is present. A value of UINT16_MAX for unknown/not used. In a array element, one unit corresponds to 1cm.
     */
    public int distances[] = new int[72];

    /**
     * Minimum distance the sensor can measure.
     */
    public int min_distance;

    /**
     * Maximum distance the sensor can measure.
     */
    public int max_distance;

    /**
     * Class id of the distance sensor type.
     */
    public short sensor_type;

    /**
     * Angular width in degrees of each array element. Increment direction is clockwise. This field is ignored if increment_f is non-zero.
     */
    public short increment;

    /**
     * Angular width in degrees of each array element as a float. If non-zero then this value is used instead of the uint8_t increment field. Positive is clockwise direction, negative is counter-clockwise.
     */
    public float increment_f;

    /**
     * Relative angle offset of the 0-index element in the distances array. Value of 0 corresponds to forward. Positive is clockwise direction, negative is counter-clockwise.
     */
    public float angle_offset;

    /**
     * Coordinate frame of reference for the yaw rotation and offset of the sensor data. Defaults to MAV_FRAME_GLOBAL, which is north aligned. For body-mounted sensors use MAV_FRAME_BODY_FRD, which is vehicle front aligned.
     */
    public short frame;


    /**
     * Generates the payload for a mavlink message for a message of this type
     *
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_OBSTACLE_DISTANCE;

        packet.payload.putUnsignedLong(time_usec);


        for (int i = 0; i < distances.length; i++) {
            packet.payload.putUnsignedShort(distances[i]);
        }


        packet.payload.putUnsignedShort(min_distance);

        packet.payload.putUnsignedShort(max_distance);

        packet.payload.putUnsignedByte(sensor_type);

        packet.payload.putUnsignedByte(increment);

        packet.payload.putFloat(increment_f);

        packet.payload.putFloat(angle_offset);

        packet.payload.putUnsignedByte(frame);

        return packet;
    }

    /**
     * Decode a obstacle_distance message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.time_usec = payload.getUnsignedLong();


        for (int i = 0; i < this.distances.length; i++) {
            this.distances[i] = payload.getUnsignedShort();
        }


        this.min_distance = payload.getUnsignedShort();

        this.max_distance = payload.getUnsignedShort();

        this.sensor_type = payload.getUnsignedByte();

        this.increment = payload.getUnsignedByte();

        this.increment_f = payload.getFloat();

        this.angle_offset = payload.getFloat();

        this.frame = payload.getUnsignedByte();

    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_obstacle_distance() {
        msgid = MAVLINK_MSG_ID_OBSTACLE_DISTANCE;
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     */
    public msg_obstacle_distance(MAVLinkPacket mavLinkPacket) {
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_OBSTACLE_DISTANCE;
        unpack(mavLinkPacket.payload);
    }


    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_OBSTACLE_DISTANCE - sysid:" + sysid + " compid:" + compid + " time_usec:" + time_usec + " distances:" + distances + " min_distance:" + min_distance + " max_distance:" + max_distance + " sensor_type:" + sensor_type + " increment:" + increment + " increment_f:" + increment_f + " angle_offset:" + angle_offset + " frame:" + frame + "";
    }
}
        