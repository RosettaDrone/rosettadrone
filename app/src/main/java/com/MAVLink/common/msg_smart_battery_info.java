/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE SMART_BATTERY_INFO PACKING
package com.MAVLink.common;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;

/**
 * Smart Battery information (static/infrequent update). Use for updates from: smart battery to flight stack, flight stack to GCS. Use instead of BATTERY_STATUS for smart batteries.
 */
public class msg_smart_battery_info extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_SMART_BATTERY_INFO = 370;
    public static final int MAVLINK_MSG_LENGTH = 73;
    private static final long serialVersionUID = MAVLINK_MSG_ID_SMART_BATTERY_INFO;


    /**
     * Capacity when full according to manufacturer, -1: field not provided.
     */
    public int capacity_full_specification;

    /**
     * Capacity when full (accounting for battery degradation), -1: field not provided.
     */
    public int capacity_full;

    /**
     * Serial number. -1: field not provided.
     */
    public int serial_number;

    /**
     * Charge/discharge cycle count. -1: field not provided.
     */
    public int cycle_count;

    /**
     * Battery weight. 0: field not provided.
     */
    public int weight;

    /**
     * Minimum per-cell voltage when discharging. If not supplied set to UINT16_MAX value.
     */
    public int discharge_minimum_voltage;

    /**
     * Minimum per-cell voltage when charging. If not supplied set to UINT16_MAX value.
     */
    public int charging_minimum_voltage;

    /**
     * Minimum per-cell voltage when resting. If not supplied set to UINT16_MAX value.
     */
    public int resting_minimum_voltage;

    /**
     * Battery ID
     */
    public short id;

    /**
     * Static device name. Encode as manufacturer and product names separated using an underscore.
     */
    public byte device_name[] = new byte[50];


    /**
     * Generates the payload for a mavlink message for a message of this type
     *
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_SMART_BATTERY_INFO;

        packet.payload.putInt(capacity_full_specification);

        packet.payload.putInt(capacity_full);

        packet.payload.putInt(serial_number);

        packet.payload.putUnsignedShort(cycle_count);

        packet.payload.putUnsignedShort(weight);

        packet.payload.putUnsignedShort(discharge_minimum_voltage);

        packet.payload.putUnsignedShort(charging_minimum_voltage);

        packet.payload.putUnsignedShort(resting_minimum_voltage);

        packet.payload.putUnsignedByte(id);


        for (int i = 0; i < device_name.length; i++) {
            packet.payload.putByte(device_name[i]);
        }


        return packet;
    }

    /**
     * Decode a smart_battery_info message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.capacity_full_specification = payload.getInt();

        this.capacity_full = payload.getInt();

        this.serial_number = payload.getInt();

        this.cycle_count = payload.getUnsignedShort();

        this.weight = payload.getUnsignedShort();

        this.discharge_minimum_voltage = payload.getUnsignedShort();

        this.charging_minimum_voltage = payload.getUnsignedShort();

        this.resting_minimum_voltage = payload.getUnsignedShort();

        this.id = payload.getUnsignedByte();


        for (int i = 0; i < this.device_name.length; i++) {
            this.device_name[i] = payload.getByte();
        }


    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_smart_battery_info() {
        msgid = MAVLINK_MSG_ID_SMART_BATTERY_INFO;
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     */
    public msg_smart_battery_info(MAVLinkPacket mavLinkPacket) {
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_SMART_BATTERY_INFO;
        unpack(mavLinkPacket.payload);
    }


    /**
     * Sets the buffer of this message with a string, adds the necessary padding
     */
    public void setDevice_Name(String str) {
        int len = Math.min(str.length(), 50);
        for (int i = 0; i < len; i++) {
            device_name[i] = (byte) str.charAt(i);
        }

        for (int i = len; i < 50; i++) {            // padding for the rest of the buffer
            device_name[i] = 0;
        }
    }

    /**
     * Gets the message, formated as a string
     */
    public String getDevice_Name() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 50; i++) {
            if (device_name[i] != 0)
                buf.append((char) device_name[i]);
            else
                break;
        }
        return buf.toString();

    }

    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_SMART_BATTERY_INFO - sysid:" + sysid + " compid:" + compid + " capacity_full_specification:" + capacity_full_specification + " capacity_full:" + capacity_full + " serial_number:" + serial_number + " cycle_count:" + cycle_count + " weight:" + weight + " discharge_minimum_voltage:" + discharge_minimum_voltage + " charging_minimum_voltage:" + charging_minimum_voltage + " resting_minimum_voltage:" + resting_minimum_voltage + " id:" + id + " device_name:" + device_name + "";
    }
}
        