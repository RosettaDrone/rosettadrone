/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE OPEN_DRONE_ID_MESSAGE_PACK PACKING
package com.MAVLink.common;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;

/**
 * An OpenDroneID message pack is a container for multiple encoded OpenDroneID messages (i.e. not in the format given for the above messages descriptions but after encoding into the compressed OpenDroneID byte format). Used e.g. when transmitting on Bluetooth 5.0 Long Range/Extended Advertising or on WiFi Neighbor Aware Networking.
 */
public class msg_open_drone_id_message_pack extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_OPEN_DRONE_ID_MESSAGE_PACK = 12915;
    public static final int MAVLINK_MSG_LENGTH = 252;
    private static final long serialVersionUID = MAVLINK_MSG_ID_OPEN_DRONE_ID_MESSAGE_PACK;


    /**
     * This field must currently always be equal to 25 bytes, since all encoded OpenDroneID messages are specificed to have this length.
     */
    public short single_message_size;

    /**
     * Number of encoded messages in the pack (not the number of bytes). Allowed range is 1 - 10.
     */
    public short msg_pack_size;

    /**
     * Concatenation of encoded OpenDroneID messages. Shall be filled with nulls in the unused portion of the field.
     */
    public short messages[] = new short[250];


    /**
     * Generates the payload for a mavlink message for a message of this type
     *
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_OPEN_DRONE_ID_MESSAGE_PACK;

        packet.payload.putUnsignedByte(single_message_size);

        packet.payload.putUnsignedByte(msg_pack_size);


        for (int i = 0; i < messages.length; i++) {
            packet.payload.putUnsignedByte(messages[i]);
        }


        return packet;
    }

    /**
     * Decode a open_drone_id_message_pack message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.single_message_size = payload.getUnsignedByte();

        this.msg_pack_size = payload.getUnsignedByte();


        for (int i = 0; i < this.messages.length; i++) {
            this.messages[i] = payload.getUnsignedByte();
        }


    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_open_drone_id_message_pack() {
        msgid = MAVLINK_MSG_ID_OPEN_DRONE_ID_MESSAGE_PACK;
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     */
    public msg_open_drone_id_message_pack(MAVLinkPacket mavLinkPacket) {
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_OPEN_DRONE_ID_MESSAGE_PACK;
        unpack(mavLinkPacket.payload);
    }


    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_OPEN_DRONE_ID_MESSAGE_PACK - sysid:" + sysid + " compid:" + compid + " single_message_size:" + single_message_size + " msg_pack_size:" + msg_pack_size + " messages:" + messages + "";
    }
}
        