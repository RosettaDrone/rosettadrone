/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE OPEN_DRONE_ID_LOCATION PACKING
package com.MAVLink.common;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;

/**
 * Data for filling the OpenDroneID Location message. The float data types are 32-bit IEEE 754. The Location message provides the location, altitude, direction and speed of the aircraft.
 */
public class msg_open_drone_id_location extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_OPEN_DRONE_ID_LOCATION = 12901;
    public static final int MAVLINK_MSG_LENGTH = 37;
    private static final long serialVersionUID = MAVLINK_MSG_ID_OPEN_DRONE_ID_LOCATION;


    /**
     * Current latitude of the UA (Unmanned Aircraft). If unknown: 0 deg (both Lat/Lon).
     */
    public int latitude;

    /**
     * Current longitude of the UA (Unmanned Aircraft). If unknown: 0 deg (both Lat/Lon).
     */
    public int longitude;

    /**
     * The altitude calculated from the barometric pressue. Reference is against 29.92inHg or 1013.2mb. If unknown: -1000 m.
     */
    public float altitude_barometric;

    /**
     * The geodetic altitude as defined by WGS84. If unknown: -1000 m.
     */
    public float altitude_geodetic;

    /**
     * The current height of the UA (Unmanned Aircraft) above the take-off location or the ground as indicated by height_reference. If unknown: -1000 m.
     */
    public float height;

    /**
     * Seconds after the full hour. Typically the GPS outputs a time of week value in milliseconds. That value can be easily converted for this field using ((float) (time_week_ms % (60*60*1000))) / 1000.
     */
    public float timestamp;

    /**
     * Direction over ground (not heading, but direction of movement) in degrees * 100: 0.0 - 359.99 degrees. If unknown: 361.00 degrees.
     */
    public int direction;

    /**
     * Ground speed. Positive only. If unknown: 255.00 m/s. If speed is larger than 254.25 m/s, use 254.25 m/s.
     */
    public int speed_horizontal;

    /**
     * The vertical speed. Up is positive. If unknown: 63.00 m/s. If speed is larger than 62.00 m/s, use 62.00 m/s.
     */
    public short speed_vertical;

    /**
     * Indicates whether the Unmanned Aircraft is on the ground or in the air.
     */
    public short status;

    /**
     * Indicates the reference point for the height field.
     */
    public short height_reference;

    /**
     * The accuracy of the horizontal position.
     */
    public short horizontal_accuracy;

    /**
     * The accuracy of the vertical position.
     */
    public short vertical_accuracy;

    /**
     * The accuracy of the barometric altitude.
     */
    public short barometer_accuracy;

    /**
     * The accuracy of the horizontal and vertical speed.
     */
    public short speed_accuracy;

    /**
     * The accuracy of the timestamps.
     */
    public short timestamp_accuracy;


    /**
     * Generates the payload for a mavlink message for a message of this type
     *
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_OPEN_DRONE_ID_LOCATION;

        packet.payload.putInt(latitude);

        packet.payload.putInt(longitude);

        packet.payload.putFloat(altitude_barometric);

        packet.payload.putFloat(altitude_geodetic);

        packet.payload.putFloat(height);

        packet.payload.putFloat(timestamp);

        packet.payload.putUnsignedShort(direction);

        packet.payload.putUnsignedShort(speed_horizontal);

        packet.payload.putShort(speed_vertical);

        packet.payload.putUnsignedByte(status);

        packet.payload.putUnsignedByte(height_reference);

        packet.payload.putUnsignedByte(horizontal_accuracy);

        packet.payload.putUnsignedByte(vertical_accuracy);

        packet.payload.putUnsignedByte(barometer_accuracy);

        packet.payload.putUnsignedByte(speed_accuracy);

        packet.payload.putUnsignedByte(timestamp_accuracy);

        return packet;
    }

    /**
     * Decode a open_drone_id_location message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.latitude = payload.getInt();

        this.longitude = payload.getInt();

        this.altitude_barometric = payload.getFloat();

        this.altitude_geodetic = payload.getFloat();

        this.height = payload.getFloat();

        this.timestamp = payload.getFloat();

        this.direction = payload.getUnsignedShort();

        this.speed_horizontal = payload.getUnsignedShort();

        this.speed_vertical = payload.getShort();

        this.status = payload.getUnsignedByte();

        this.height_reference = payload.getUnsignedByte();

        this.horizontal_accuracy = payload.getUnsignedByte();

        this.vertical_accuracy = payload.getUnsignedByte();

        this.barometer_accuracy = payload.getUnsignedByte();

        this.speed_accuracy = payload.getUnsignedByte();

        this.timestamp_accuracy = payload.getUnsignedByte();

    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_open_drone_id_location() {
        msgid = MAVLINK_MSG_ID_OPEN_DRONE_ID_LOCATION;
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     */
    public msg_open_drone_id_location(MAVLinkPacket mavLinkPacket) {
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_OPEN_DRONE_ID_LOCATION;
        unpack(mavLinkPacket.payload);
    }


    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_OPEN_DRONE_ID_LOCATION - sysid:" + sysid + " compid:" + compid + " latitude:" + latitude + " longitude:" + longitude + " altitude_barometric:" + altitude_barometric + " altitude_geodetic:" + altitude_geodetic + " height:" + height + " timestamp:" + timestamp + " direction:" + direction + " speed_horizontal:" + speed_horizontal + " speed_vertical:" + speed_vertical + " status:" + status + " height_reference:" + height_reference + " horizontal_accuracy:" + horizontal_accuracy + " vertical_accuracy:" + vertical_accuracy + " barometer_accuracy:" + barometer_accuracy + " speed_accuracy:" + speed_accuracy + " timestamp_accuracy:" + timestamp_accuracy + "";
    }
}
        