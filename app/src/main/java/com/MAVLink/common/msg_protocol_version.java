/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE PROTOCOL_VERSION PACKING
package com.MAVLink.common;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;

/**
 * Version and capability of protocol version. This message is the response to REQUEST_PROTOCOL_VERSION and is used as part of the handshaking to establish which MAVLink version should be used on the network. Every node should respond to REQUEST_PROTOCOL_VERSION to enable the handshaking. Library implementers should consider adding this into the default decoding state machine to allow the protocol core to respond directly.
 */
public class msg_protocol_version extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_PROTOCOL_VERSION = 300;
    public static final int MAVLINK_MSG_LENGTH = 22;
    private static final long serialVersionUID = MAVLINK_MSG_ID_PROTOCOL_VERSION;


    /**
     * Currently active MAVLink version number * 100: v1.0 is 100, v2.0 is 200, etc.
     */
    public int version;

    /**
     * Minimum MAVLink version supported
     */
    public int min_version;

    /**
     * Maximum MAVLink version supported (set to the same value as version by default)
     */
    public int max_version;

    /**
     * The first 8 bytes (not characters printed in hex!) of the git hash.
     */
    public short spec_version_hash[] = new short[8];

    /**
     * The first 8 bytes (not characters printed in hex!) of the git hash.
     */
    public short library_version_hash[] = new short[8];


    /**
     * Generates the payload for a mavlink message for a message of this type
     *
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_PROTOCOL_VERSION;

        packet.payload.putUnsignedShort(version);

        packet.payload.putUnsignedShort(min_version);

        packet.payload.putUnsignedShort(max_version);


        for (int i = 0; i < spec_version_hash.length; i++) {
            packet.payload.putUnsignedByte(spec_version_hash[i]);
        }


        for (int i = 0; i < library_version_hash.length; i++) {
            packet.payload.putUnsignedByte(library_version_hash[i]);
        }


        return packet;
    }

    /**
     * Decode a protocol_version message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.version = payload.getUnsignedShort();

        this.min_version = payload.getUnsignedShort();

        this.max_version = payload.getUnsignedShort();


        for (int i = 0; i < this.spec_version_hash.length; i++) {
            this.spec_version_hash[i] = payload.getUnsignedByte();
        }


        for (int i = 0; i < this.library_version_hash.length; i++) {
            this.library_version_hash[i] = payload.getUnsignedByte();
        }


    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_protocol_version() {
        msgid = MAVLINK_MSG_ID_PROTOCOL_VERSION;
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     */
    public msg_protocol_version(MAVLinkPacket mavLinkPacket) {
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_PROTOCOL_VERSION;
        unpack(mavLinkPacket.payload);
    }


    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_PROTOCOL_VERSION - sysid:" + sysid + " compid:" + compid + " version:" + version + " min_version:" + min_version + " max_version:" + max_version + " spec_version_hash:" + spec_version_hash + " library_version_hash:" + library_version_hash + "";
    }
}
        