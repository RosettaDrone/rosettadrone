/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE ORBIT_EXECUTION_STATUS PACKING
package com.MAVLink.common;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;

/**
 * Vehicle status report that is sent out while orbit execution is in progress (see MAV_CMD_DO_ORBIT).
 */
public class msg_orbit_execution_status extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_ORBIT_EXECUTION_STATUS = 360;
    public static final int MAVLINK_MSG_LENGTH = 25;
    private static final long serialVersionUID = MAVLINK_MSG_ID_ORBIT_EXECUTION_STATUS;


    /**
     * Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
     */
    public long time_usec;

    /**
     * Radius of the orbit circle. Positive values orbit clockwise, negative values orbit counter-clockwise.
     */
    public float radius;

    /**
     * X coordinate of center point. Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.
     */
    public int x;

    /**
     * Y coordinate of center point.  Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.
     */
    public int y;

    /**
     * Altitude of center point. Coordinate system depends on frame field.
     */
    public float z;

    /**
     * The coordinate system of the fields: x, y, z.
     */
    public short frame;


    /**
     * Generates the payload for a mavlink message for a message of this type
     *
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_ORBIT_EXECUTION_STATUS;

        packet.payload.putUnsignedLong(time_usec);

        packet.payload.putFloat(radius);

        packet.payload.putInt(x);

        packet.payload.putInt(y);

        packet.payload.putFloat(z);

        packet.payload.putUnsignedByte(frame);

        return packet;
    }

    /**
     * Decode a orbit_execution_status message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.time_usec = payload.getUnsignedLong();

        this.radius = payload.getFloat();

        this.x = payload.getInt();

        this.y = payload.getInt();

        this.z = payload.getFloat();

        this.frame = payload.getUnsignedByte();

    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_orbit_execution_status() {
        msgid = MAVLINK_MSG_ID_ORBIT_EXECUTION_STATUS;
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     */
    public msg_orbit_execution_status(MAVLinkPacket mavLinkPacket) {
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_ORBIT_EXECUTION_STATUS;
        unpack(mavLinkPacket.payload);
    }


    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_ORBIT_EXECUTION_STATUS - sysid:" + sysid + " compid:" + compid + " time_usec:" + time_usec + " radius:" + radius + " x:" + x + " y:" + y + " z:" + z + " frame:" + frame + "";
    }
}
        