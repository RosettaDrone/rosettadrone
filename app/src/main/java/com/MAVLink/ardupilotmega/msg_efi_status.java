/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE EFI_STATUS PACKING
package com.MAVLink.ardupilotmega;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;

/**
 * EFI Status Output
 */
public class msg_efi_status extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_EFI_STATUS = 225;
    public static final int MAVLINK_MSG_LENGTH = 53;
    private static final long serialVersionUID = MAVLINK_MSG_ID_EFI_STATUS;


    /**
     * ECU Index
     */
    public float ecu_index;

    /**
     * RPM
     */
    public float rpm;

    /**
     * Fuel Consumed (grams)
     */
    public float fuel_consumed;

    /**
     * Fuel Flow Rate (g/min)
     */
    public float fuel_flow;

    /**
     * Engine Load (%)
     */
    public float engine_load;

    /**
     * Throttle Position (%)
     */
    public float throttle_position;

    /**
     * Spark Dwell Time (ms)
     */
    public float spark_dwell_time;

    /**
     * Barometric Pressure (kPa)
     */
    public float barometric_pressure;

    /**
     * Intake Manifold Pressure (kPa)(
     */
    public float intake_manifold_pressure;

    /**
     * Intake Manifold Temperature (degC)
     */
    public float intake_manifold_temperature;

    /**
     * cylinder_head_temperature (degC)
     */
    public float cylinder_head_temperature;

    /**
     * Ignition timing for cylinder i (Crank Angle degrees)
     */
    public float ignition_timing;

    /**
     * Injection time for injector i (ms)
     */
    public float injection_time;

    /**
     * EFI Health status
     */
    public short health;


    /**
     * Generates the payload for a mavlink message for a message of this type
     *
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_EFI_STATUS;

        packet.payload.putFloat(ecu_index);

        packet.payload.putFloat(rpm);

        packet.payload.putFloat(fuel_consumed);

        packet.payload.putFloat(fuel_flow);

        packet.payload.putFloat(engine_load);

        packet.payload.putFloat(throttle_position);

        packet.payload.putFloat(spark_dwell_time);

        packet.payload.putFloat(barometric_pressure);

        packet.payload.putFloat(intake_manifold_pressure);

        packet.payload.putFloat(intake_manifold_temperature);

        packet.payload.putFloat(cylinder_head_temperature);

        packet.payload.putFloat(ignition_timing);

        packet.payload.putFloat(injection_time);

        packet.payload.putUnsignedByte(health);

        return packet;
    }

    /**
     * Decode a efi_status message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.ecu_index = payload.getFloat();

        this.rpm = payload.getFloat();

        this.fuel_consumed = payload.getFloat();

        this.fuel_flow = payload.getFloat();

        this.engine_load = payload.getFloat();

        this.throttle_position = payload.getFloat();

        this.spark_dwell_time = payload.getFloat();

        this.barometric_pressure = payload.getFloat();

        this.intake_manifold_pressure = payload.getFloat();

        this.intake_manifold_temperature = payload.getFloat();

        this.cylinder_head_temperature = payload.getFloat();

        this.ignition_timing = payload.getFloat();

        this.injection_time = payload.getFloat();

        this.health = payload.getUnsignedByte();

    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_efi_status() {
        msgid = MAVLINK_MSG_ID_EFI_STATUS;
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     */
    public msg_efi_status(MAVLinkPacket mavLinkPacket) {
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_EFI_STATUS;
        unpack(mavLinkPacket.payload);
    }


    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_EFI_STATUS - sysid:" + sysid + " compid:" + compid + " ecu_index:" + ecu_index + " rpm:" + rpm + " fuel_consumed:" + fuel_consumed + " fuel_flow:" + fuel_flow + " engine_load:" + engine_load + " throttle_position:" + throttle_position + " spark_dwell_time:" + spark_dwell_time + " barometric_pressure:" + barometric_pressure + " intake_manifold_pressure:" + intake_manifold_pressure + " intake_manifold_temperature:" + intake_manifold_temperature + " cylinder_head_temperature:" + cylinder_head_temperature + " ignition_timing:" + ignition_timing + " injection_time:" + injection_time + " health:" + health + "";
    }
}
        