/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE DEVICE_OP_READ_REPLY PACKING
package com.MAVLink.ardupilotmega;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;

/**
 * Read registers reply.
 */
public class msg_device_op_read_reply extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY = 11001;
    public static final int MAVLINK_MSG_LENGTH = 135;
    private static final long serialVersionUID = MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY;


    /**
     * Request ID - copied from request.
     */
    public long request_id;

    /**
     * 0 for success, anything else is failure code.
     */
    public short result;

    /**
     * Starting register.
     */
    public short regstart;

    /**
     * Count of bytes read.
     */
    public short count;

    /**
     * Reply data.
     */
    public short data[] = new short[128];


    /**
     * Generates the payload for a mavlink message for a message of this type
     *
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY;

        packet.payload.putUnsignedInt(request_id);

        packet.payload.putUnsignedByte(result);

        packet.payload.putUnsignedByte(regstart);

        packet.payload.putUnsignedByte(count);


        for (int i = 0; i < data.length; i++) {
            packet.payload.putUnsignedByte(data[i]);
        }


        return packet;
    }

    /**
     * Decode a device_op_read_reply message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.request_id = payload.getUnsignedInt();

        this.result = payload.getUnsignedByte();

        this.regstart = payload.getUnsignedByte();

        this.count = payload.getUnsignedByte();


        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = payload.getUnsignedByte();
        }


    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_device_op_read_reply() {
        msgid = MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY;
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     */
    public msg_device_op_read_reply(MAVLinkPacket mavLinkPacket) {
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY;
        unpack(mavLinkPacket.payload);
    }


    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY - sysid:" + sysid + " compid:" + compid + " request_id:" + request_id + " result:" + result + " regstart:" + regstart + " count:" + count + " data:" + data + "";
    }
}
        